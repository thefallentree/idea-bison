{
  parserUtilClass="generated.BisonParserUtil"
    // stubs
    tokens = [
        ID="regexp:."
        ID_COLON="regexp:."
        PROLOGUE_LITERAL="regexp:."
        EPILOGUE_LITERAL="regexp:."
        PREDICATE_LITERAL="regexp:."
        INT_LITERAL="regexp:."
        COMMENT="regexp:."
    ]

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiImplUtilClass="info.fluffos.BisonPsiImplUtil"
    elementTypeClass="info.fluffos.BisonCompositeElementType"
    tokenTypeFactory="info.fluffos.BisonTokenType.token"
}


input    ::= prologue_declaration* '%%' rules_or_grammar_declaration+ '%%' epilogue?
prologue_declaration ::= prologue
           | grammar_declaration
           | '%<flag>'
           | '%define' variable value
           | '%header' STRING?
           | '%error-verbose'
           | ( '%expect' | '%expect-rr' ) INT_LITERAL
           | ( '%file-prefix' | '%language' | '%name-prefix' | '%output' | '%require' | '%skeleton' ) STRING
           | '%glr-parser'
           | '%initial-action' braced_code
           | '%no-lines'
           | '%nondeterministic-parser'
           | '%param' braced_code+
           | '%parse-param' braced_code+
           | '%lex-param' braced_code+
           | '%pure-parser'
           | '%token-table'
           | '%verbose'
           | '%yacc'
           | error? ';'



grammar_declaration
         ::= symbol_declaration
           | '%start' symbol+
           | code_props_type braced_code generic_symlist_item+
           | '%default-prec'
           | '%no-default-prec'
           | ( '%code' ID_OR_CHAR_LITERAL? | '%union' union_name ) braced_code
code_props_type
         ::= '%destructor'
           | '%printer'
union_name
         ::= ID_OR_CHAR_LITERAL?
symbol_declaration
         ::= '%nterm' nterm_decls
           | '%token' token_decls
           | '%type' TAG? symbol+ ( TAG symbol+ )*
           | precedence_declarator TAG? token_decl_for_prec_1 ( TAG token_decl_for_prec_1 )*
precedence_declarator
         ::= '%left'
           | '%right'
           | '%nonassoc'
           | '%precedence'

generic_symlist_item
         ::= symbol
           | TAG
TAG      ::= TAG_ANY
           | TAG_NONE
           | TAG_TAG
nterm_decls
         ::= token_decls
token_decls
         ::= TAG? token_decl+ ( TAG token_decl+ )*
token_decl
         ::= ID_OR_CHAR_LITERAL INT_LITERAL? alias

alias    ::= ( string_as_id | TSTRING )?
token_decl_for_prec_1
         ::= token_decl_for_prec+

token_decl_for_prec
         ::= ID_OR_CHAR_LITERAL INT_LITERAL?
           | string_as_id

rules_or_grammar_declaration
         ::= rules ';'?
         | grammar_declaration ';'

rules    ::= ID_COLON BRACKETED_ID? ':' rhs ('|' rhs)* {
  mixin="info.fluffos.BisonNamedElementImpl"
  implements="info.fluffos.BisonNamedElement"
  methods=[getKey getValue getName setName getNameIdentifier getPresentation]
}

rhs      ::= (symbol BRACKETED_ID?
            | TAG? braced_code BRACKETED_ID?
            | predicate
            | '%empty'
            | '%prec' symbol
            | ( '%dprec' | '%expect' | '%expect-rr' ) INT_LITERAL
            | '%merge' TAG)*

variable ::= ID_OR_CHAR_LITERAL
value    ::= ( ID_OR_CHAR_LITERAL | STRING | braced_code )?
ID_OR_CHAR_LITERAL ::= ID | CHAR_LITERAL

symbol   ::= ID_OR_CHAR_LITERAL
           | string_as_id
string_as_id
         ::= STRING

// TOKENS
predicate ::= PREDICATE_LITERAL
braced_code ::= BRACED_CODE_LITERAL
prologue ::= PROLOGUE_LITERAL
epilogue ::= EPILOGUE_LITERAL
